angular 13 & 14 is lst verion so most of is used by more people 

==> 
<html> ==> this    tag is called  root 
DOM ==> Document object model (this is going to document your html tag for more futuristic manner)
(what is input DOM ==> input element ==> input tag )


xml => its  does'nt have any pre-defined tag 
html ==> all tag is pre-defined

html ==> tag ==> element (Chrome is 

Block line element && Inline element ===>

Block line element ==> occupy entire horizontal space 

Inline Element ==> occupy necessary space only 


lecture 9 ==>



lecture  11 ==>

#Different between Get and post 

post => will submit the data by appending the body , post method consist the both header and body  i.e link dont contain the details of form 

get ==> will submit the data by appending the header i.e i will get the data in the link 


lecture 11 End ===>

lecture 12  ==>


we have learned about the form 

==> in form we use onblur ==> that make input field more dynamic for the user 
==> onblur is used when user came to input field but not field the data to that input field we apply the the method 

lecture 12 end ==>


lecture 13 ==>

NodeJs ==> javascript Runtime Environment and also Backend FrameWork 
node 17 onward angular is accessable 

NPM ==> Node Package manager ==> Automate the build process(build tools) ==> Collecting liberies , configuratuin 


==> Nodejs vs NPM 

nodejs is a runtime Environment
npm is build process

===>build process

FolderStructure
Collecting The liberies
Compilation or Interpretation process
Configuration

+++++++++++++

package.json ==> 




package.json ==>
devDependencies is for local machine 
dependencies is use for server 

npm init ==> create the package  json

======
snipe@DESKTOP-4FNGGB3 MINGW64 /c/Angular Ashoka (master)
$ npm run test

==========

snipe@DESKTOP-4FNGGB3 MINGW64 /c/Angular Ashoka (master)
$ npm install d3 --save
==> THIS will download and save in the package.json

==========
npm install -g typescript
==> install the typescript globally

===========

npm install -g tsc

==> install tsc for typescript compiler

All Command recap ==>
1. Nodejs
2.NPM
3.npm install -g typescript
4. npm install -g tsc 

lecture 13 end ==>

lecture 14 start =====>

Disadvantage of javascript ?

1. javascript is not have type safty
2. javascript is not having scope safty

 ==> JS + typesafty ===> Typescript

==> typescript is super script of javascript
==> ts is objected oriented technique

1. Once object is create with int and in later you cannot store string value i.e typesafty

==> rollnumber : number;
==> userName : string;
==> isActive : boolean;
==> roll : 2;

     structure oriented                     vs                      object oriented 

==>  C , javascript , C squal                                         java , c++ , C# , Python                                                  
==>  code written in structre format                                 typescript   not support all oops format                                                        
==>  no concept of reuse of code                                      only support encapsulation , inheritance , abstraction and some polymorphism                                                    
==>  Debugging is very Diffcult                                                                                            
==>  it only focus only on function                                                                                             
==>                                                                                              
==>                                                                                              

 encapsulation ==>
 1. process of binding method and variable in single entity  ==>(Entity is called class)
 2. 


reference variable store object 

this . ==> Used to is called the current class object or to use  the global variable we use (this.)







lecture 14 end ======>

lecture 15==>

class==>
1. if you want to 


Public ==>                             protected ==>                                     private ==>
1. Default Visibility                  1. inside the class                                1. Only inside the  class  
2. Inside the class                    2. inside sub-class                                2. not in the subclass
3. Outside class                       3. ont out side the class                          3. not outside class
4. In Sub-Class

Inheritance 



==>

IS-A ==> Extend

HAS-A ==> called parent class object in child class

==> Create a parent and child class indiffernt file 

import {Demo} from "./demo";

==> class need to be exported before extends 

member ==> variable and method 
 ts ==> member visibality


public ==> 
1.parent  class
2.outside class
3.child class




Lecture 15 end ==>





lecture 16 ==>

constructor =>
1. constructor is created at the time object is created 
2.constructor overloading is not possible 



lecture 16 end ==>


Lecture 17 ==  firstapp project > 

CLI ==> Used by cmd 
GUI ==> UI Tools 

npm install ==> npm install -g @angular/cli ==> For global 

firstapp ==> project 
1. test ==> ng v  ==> for check that angualr is present  or  install by above command
2. create new project ==> ng new firstapp  or ng new --on-standalone firstapp  ==> for above angular 17 we need to use standalone for creation of the module 
3. to run the project ==> ng serve

DirectoryStructure 

1. package.json ==> Necessary dependencies and some change in project , adding some library we go with package.json (Package related confuguration)
2. tsconfig.json ==> angualr version  and configuration and apply some change on typescript we go with tsconfig.json(change regarding typescript)
3. angular.json ==> apply some change  in angular FrameWork like add bootstrap (changes regarding angular framework)

src ==> 
1.App folder ----
               1. app.component.ts
               2. app.services
               3. app.modules

2. Assest Folder-----==> External files

3. index.html ==> home page 



Lecture 17  end ==>



Lecture 18 ==  crated the angular project>

1. Created project ==> angulardemo


angular is called component based design ==> develop big view in small small part  


multipage ==> reload the  all the resource 
singlepage ==> reload page resource for 1 time only 

component ==> View + Login 
1.view ==> is selector and template and module

Lecture 18 End ==>


lecture 19 ==>


CLI Command ==>
1. ng generate component homecomponent ==> ng g c home
2. ng generate service demo  ==> ng g s
3. ng generate pipe => ng g p
4. ng generate module ==> ng g m 



component ==> consist of view and logic 

1. view ==> view can be used in the two ways
           1. template  ==> only html code is written 
           2. templateUrl ==> we refer the external html to the project 




Lecture 19 end ==>


lecture 20 ==>


onClick()==> (Click);

id="username" ==> #username

1. if your input type 
 a.username ==> text 
 b password ==> password 

==> and you are using the click event in the angular then you need pass the value from the button to the component class
==> then function you have called has to be some parameter that parameter need to be be any then you can called the value using
==> username.value and password.value then you can get that value in the method 




lecture 20 end ==>


lecture 21==>

In this we learned about how to pass the data from parent class to the child class 

==> like one componet to another 
==> through @input filed 



Lecture 21 End ==>


Lecture 22 == making @output annotation passing value to the parents from child>


==> Step 1 : ==> for send data from child class to parent class  we need to first make a object with @Output annotation
=-=> Step 2: ==> that object need to (new EventEmitter()); that make the object to be emited to the parent component 

export class DemoComponentComponent {

@Input()
inputData:any;



  @Output()
  passOutput = new EventEmitter();



  getData(val: any) {
    this.passOutput.emit(val);
  }


==> step 3 : ==> in third step we need to get the value that i need to passed to the parent component 
===> Step 4 : ==> here i have taken the id (#outputValue)  that is get called in the getData() function using keyup 
==> Step 5 : ==> this value get called in the ts file that is illustrated in the above class 

<h1>demo-component works!</h1>

<input type="text" #outputValue (keyup)="getData(outputValue.value)">



==> Step 6 : ==> now i have to passed the selector to the parents html page and in that i need to pass the object 
===> Step 7 : ==> using ()==> using round bracket because as we declared the object as new EventEmmiter() this make the object as the event 
==> Step 8 : ==> Event is called in the () => round bracket here i have passed the object and in the method i have called the parent class function 
==> Step 9 : ==> parent class function ==> getOutputData($event) ==> $event is generic method that catch all the object that are comming from this method


<h1>Getting the output Data</h1>

{{op}}


<app-demo-component (passOutput)="getOutputData($event)"></app-demo-component>



==> Step 10 : ==> this is how i have displayed the object of the (op) in the parent componet html that i have displayed in the above steps 

  op: any;


  getOutputData(val: any) {
    this.op = val;
  }
Lecture 22 End ==>


Lecture 23 ==>


note => Directive anhence the functionlity of the html elements


==> in this chapter we have learned about the *ngIf and *ngFor and how to created a custom directive 
==> to created a custom directive first you need to first create the directive class
==> type thi command to create the directive ==> ng g d demo





import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'directive';


  age: number = 0;

  total =['Ashish', 'Manish','Komal','Rajkumari','Sheshmani'];

  isEligble(val:any){

    this.age = val;
  }

}

===> here we first created the variable age which get the get from the input field
==> we have created the array of name total ==> 



==> App.component.html ==> page 

<h1 appDemo>App Component </h1>

<input type="text" #ageInput >
<input type="button" (click)="isEligble(ageInput.value)" value="Submit">

<div *ngIf="age>18"> Hello There !!! you are eligable </div>

<p appDemo>Array Data is Displayed </p>

<ul *ngFor="let temp of total" >

  <li>{{temp}}</li>

</ul>


==> here i have used the *ngIf statement 
==> and *ngFor is also been used for iteraton 
==> and if you carfully observe the paragraph and h1 tag you will see (appDemo) ==> that is directives that i have created in the below code 



===> import { Directive, ElementRef } from '@angular/core';

@Directive({
  selector: '[appDemo]'
})
export class DemoDirective {

  constructor(private el: ElementRef) {



    console.log("Directive is called ");

    el.nativeElement.style = "background-color:teal; color:white";
  }

}

===> in top you can see selector that can be used as the name in the varible like id you provide and a provide add on functionalty for user 
==> later in the constructor we have declared the ElementRef ==> that created the object that object id futher is used for the object reference and 
==> for change the nativeElement.style for the purpose that you need 


Lecture 23 end ==>

Lecture 24 ==>


in this we learned about the Pipe 
==> Pipe dont not change the element it change the variable of the outcome
==> where as directive change the method of the element 

<p> {{price | uppercase}}

Lecture 24 End ==>


Lecture 25 ==>


@pipe(name:'' , pure:true) ==> pure pipe ==> if value change which a pure change 

@pipe(name:'', pure:false)==> Impure pipe => anything change 

ng g pipe evenodd ==>command to create a pipe class



==> this is called the pure pipe 

import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'evenodd'
})
export class EvenoddPipe implements PipeTransform {
 
  // console.log("------------------Even odd pipe is executed--------------");
 

  transform(value: any) {

    if (value % 2 == 0) {
      return value + ' is even Number ';
    }

    return value + '  is odd Number ';
  }

}

==>===============================

==> Impure pipe ==> in impure logic we used to declared the==> pure : false
==>deafault is pure pipe 


import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'evenodd'
  pure:false
})
export class EvenoddPipe implements PipeTransform {
 
  // console.log("------------------Even odd pipe is executed--------------");
 

  transform(value: any) {

    if (value % 2 == 0) {
      return value + ' is even Number ';
    }

    return value + '  is odd Number ';
  }

}




==> in lecture 25 we learned how  to create the customized pipe and in pipe we have 2 type pure and impure that implementation is showned in the 
==> in the lecture 

Lecture 25 end ==>




























































angular 13 & 14 is lst verion so most of is used by more people 

==> 
<html> ==> this    tag is called  root 
DOM ==> Document object model (this is going to document your html tag for more futuristic manner)
(what is input DOM ==> input element ==> input tag )


xml => its  does'nt have any pre-defined tag 
html ==> all tag is pre-defined

html ==> tag ==> element (Chrome is 

Block line element && Inline element ===>

Block line element ==> occupy entire horizontal space 

Inline Element ==> occupy necessary space only 


lecture 9 ==>



lecture  11 ==>

#Different between Get and post 

post => will submit the data by appending the body , post method consist the both header and body  i.e link dont contain the details of form 

get ==> will submit the data by appending the header i.e i will get the data in the link 


lecture 11 End ===>

lecture 12  ==>


we have learned about the form 

==> in form we use onblur ==> that make input field more dynamic for the user 
==> onblur is used when user came to input field but not field the data to that input field we apply the the method 

lecture 12 end ==>


lecture 13 ==>

NodeJs ==> javascript Runtime Environment and also Backend FrameWork 
node 17 onward angular is accessable 

NPM ==> Node Package manager ==> Automate the build process(build tools) ==> Collecting liberies , configuratuin 


==> Nodejs vs NPM 

nodejs is a runtime Environment
npm is build process

===>build process

FolderStructure
Collecting The liberies
Compilation or Interpretation process
Configuration

+++++++++++++

package.json ==> 




package.json ==>
devDependencies is for local machine 
dependencies is use for server 

npm init ==> create the package  json

======
snipe@DESKTOP-4FNGGB3 MINGW64 /c/Angular Ashoka (master)
$ npm run test

==========

snipe@DESKTOP-4FNGGB3 MINGW64 /c/Angular Ashoka (master)
$ npm install d3 --save
==> THIS will download and save in the package.json

==========
npm install -g typescript
==> install the typescript globally

===========

npm install -g tsc

==> install tsc for typescript compiler

All Command recap ==>
1. Nodejs
2.NPM
3.npm install -g typescript
4. npm install -g tsc 

lecture 13 end ==>

lecture 14 start =====>

Disadvantage of javascript ?

1. javascript is not have type safty
2. javascript is not having scope safty

 ==> JS + typesafty ===> Typescript

==> typescript is super script of javascript
==> ts is objected oriented technique

1. Once object is create with int and in later you cannot store string value i.e typesafty

==> rollnumber : number;
==> userName : string;
==> isActive : boolean;
==> roll : 2;

     structure oriented                     vs                      object oriented 

==>  C , javascript , C squal                                         java , c++ , C# , Python                                                  
==>  code written in structre format                                 typescript   not support all oops format                                                        
==>  no concept of reuse of code                                      only support encapsulation , inheritance , abstraction and some polymorphism                                                    
==>  Debugging is very Diffcult                                                                                            
==>  it only focus only on function                                                                                             
==>                                                                                              
==>                                                                                              

 encapsulation ==>
 1. process of binding method and variable in single entity  ==>(Entity is called class)
 2. 


reference variable store object 

this . ==> Used to is called the current class object or to use  the global variable we use (this.)







lecture 14 end ======>

lecture 15==>

class==>
1. if you want to 


Public ==>                             protected ==>                                     private ==>
1. Default Visibility                  1. inside the class                                1. Only inside the  class  
2. Inside the class                    2. inside sub-class                                2. not in the subclass
3. Outside class                       3. ont out side the class                          3. not outside class
4. In Sub-Class

Inheritance 



==>

IS-A ==> Extend

HAS-A ==> called parent class object in child class

==> Create a parent and child class indiffernt file 

import {Demo} from "./demo";

==> class need to be exported before extends 

member ==> variable and method 
 ts ==> member visibality


public ==> 
1.parent  class
2.outside class
3.child class




Lecture 15 end ==>





lecture 16 ==>

constructor =>
1. constructor is created at the time object is created 
2.constructor overloading is not possible 



lecture 16 end ==>


Lecture 17 ==  firstapp project > 

CLI ==> Used by cmd 
GUI ==> UI Tools 

npm install ==> npm install -g @angular/cli ==> For global 

firstapp ==> project 
1. test ==> ng v  ==> for check that angualr is present  or  install by above command
2. create new project ==> ng new firstapp  or ng new --on-standalone firstapp  ==> for above angular 17 we need to use standalone for creation of the module 
3. to run the project ==> ng serve

DirectoryStructure 

1. package.json ==> Necessary dependencies and some change in project , adding some library we go with package.json (Package related confuguration)
2. tsconfig.json ==> angualr version  and configuration and apply some change on typescript we go with tsconfig.json(change regarding typescript)
3. angular.json ==> apply some change  in angular FrameWork like add bootstrap (changes regarding angular framework)

src ==> 
1.App folder ----
               1. app.component.ts
               2. app.services
               3. app.modules

2. Assest Folder-----==> External files

3. index.html ==> home page 



Lecture 17  end ==>



Lecture 18 ==  crated the angular project>

1. Created project ==> angulardemo


angular is called component based design ==> develop big view in small small part  


multipage ==> reload the  all the resource 
singlepage ==> reload page resource for 1 time only 

component ==> View + Login 
1.view ==> is selector and template and module

Lecture 18 End ==>


lecture 19 ==>


CLI Command ==>
1. ng generate component homecomponent ==> ng g c home
2. ng generate service demo  ==> ng g s
3. ng generate pipe => ng g p
4. ng generate module ==> ng g m 



component ==> consist of view and logic 

1. view ==> view can be used in the two ways
           1. template  ==> only html code is written 
           2. templateUrl ==> we refer the external html to the project 




Lecture 19 end ==>


lecture 20 ==>


onClick()==> (Click);

id="username" ==> #username

1. if your input type 
 a.username ==> text 
 b password ==> password 

==> and you are using the click event in the angular then you need pass the value from the button to the component class
==> then function you have called has to be some parameter that parameter need to be be any then you can called the value using
==> username.value and password.value then you can get that value in the method 




lecture 20 end ==>


lecture 21==>

In this we learned about how to pass the data from parent class to the child class 

==> like one componet to another 
==> through @input filed 



Lecture 21 End ==>


Lecture 22 == making @output annotation passing value to the parents from child>


==> Step 1 : ==> for send data from child class to parent class  we need to first make a object with @Output annotation
=-=> Step 2: ==> that object need to (new EventEmitter()); that make the object to be emited to the parent component 

export class DemoComponentComponent {

@Input()
inputData:any;



  @Output()
  passOutput = new EventEmitter();



  getData(val: any) {
    this.passOutput.emit(val);
  }


==> step 3 : ==> in third step we need to get the value that i need to passed to the parent component 
===> Step 4 : ==> here i have taken the id (#outputValue)  that is get called in the getData() function using keyup 
==> Step 5 : ==> this value get called in the ts file that is illustrated in the above class 

<h1>demo-component works!</h1>

<input type="text" #outputValue (keyup)="getData(outputValue.value)">



==> Step 6 : ==> now i have to passed the selector to the parents html page and in that i need to pass the object 
===> Step 7 : ==> using ()==> using round bracket because as we declared the object as new EventEmmiter() this make the object as the event 
==> Step 8 : ==> Event is called in the () => round bracket here i have passed the object and in the method i have called the parent class function 
==> Step 9 : ==> parent class function ==> getOutputData($event) ==> $event is generic method that catch all the object that are comming from this method


<h1>Getting the output Data</h1>

{{op}}


<app-demo-component (passOutput)="getOutputData($event)"></app-demo-component>



==> Step 10 : ==> this is how i have displayed the object of the (op) in the parent componet html that i have displayed in the above steps 

  op: any;


  getOutputData(val: any) {
    this.op = val;
  }
Lecture 22 End ==>


Lecture 23 ==>


note => Directive anhence the functionlity of the html elements


==> in this chapter we have learned about the *ngIf and *ngFor and how to created a custom directive 
==> to created a custom directive first you need to first create the directive class
==> type thi command to create the directive ==> ng g d demo





import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'directive';


  age: number = 0;

  total =['Ashish', 'Manish','Komal','Rajkumari','Sheshmani'];

  isEligble(val:any){

    this.age = val;
  }

}

===> here we first created the variable age which get the get from the input field
==> we have created the array of name total ==> 



==> App.component.html ==> page 

<h1 appDemo>App Component </h1>

<input type="text" #ageInput >
<input type="button" (click)="isEligble(ageInput.value)" value="Submit">

<div *ngIf="age>18"> Hello There !!! you are eligable </div>

<p appDemo>Array Data is Displayed </p>

<ul *ngFor="let temp of total" >

  <li>{{temp}}</li>

</ul>


==> here i have used the *ngIf statement 
==> and *ngFor is also been used for iteraton 
==> and if you carfully observe the paragraph and h1 tag you will see (appDemo) ==> that is directives that i have created in the below code 



===> import { Directive, ElementRef } from '@angular/core';

@Directive({
  selector: '[appDemo]'
})
export class DemoDirective {

  constructor(private el: ElementRef) {



    console.log("Directive is called ");

    el.nativeElement.style = "background-color:teal; color:white";
  }

}

===> in top you can see selector that can be used as the name in the varible like id you provide and a provide add on functionalty for user 
==> later in the constructor we have declared the ElementRef ==> that created the object that object id futher is used for the object reference and 
==> for change the nativeElement.style for the purpose that you need 


Lecture 23 end ==>

Lecture 24 ==>


in this we learned about the Pipe 
==> Pipe dont not change the element it change the variable of the outcome
==> where as directive change the method of the element 

<p> {{price | uppercase}}

Lecture 24 End ==>


Lecture 25 ==>


@pipe(name:'' , pure:true) ==> pure pipe ==> if value change which a pure change 

@pipe(name:'', pure:false)==> Impure pipe => anything change 

ng g pipe evenodd ==>command to create a pipe class



==> this is called the pure pipe 

import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'evenodd'
})
export class EvenoddPipe implements PipeTransform {
 
  // console.log("------------------Even odd pipe is executed--------------");
 

  transform(value: any) {

    if (value % 2 == 0) {
      return value + ' is even Number ';
    }

    return value + '  is odd Number ';
  }

}

==>===============================

==> Impure pipe ==> in impure logic we used to declared the==> pure : false
==>deafault is pure pipe 


import { Pipe, PipeTransform } from '@angular/core';

@Pipe({
  name: 'evenodd'
  pure:false
})
export class EvenoddPipe implements PipeTransform {
 
  // console.log("------------------Even odd pipe is executed--------------");
 

  transform(value: any) {

    if (value % 2 == 0) {
      return value + ' is even Number ';
    }

    return value + '  is odd Number ';
  }

}




==> in lecture 25 we learned how  to create the customized pipe and in pipe we have 2 type pure and impure that implementation is showned in the 
==> in the lecture 

Lecture 25 end ==>

Lecture 26 ==>

Component LifeCycle ==> 8 Stage 

1. ngOnInit==> Initilized at the time of component creation 

2. ngOnDestroy ==> removing component in the DOM
 A. onDestroy -> Implementation 
 B. when you remove the component from use the onDestroy is called
 C. example : => child class is remove from the use from parent class

3. ngOnChange 
 A. OnChange -> implementation
 B. 

4. ngDoCheck 
A. DoCheck -> Implementation 
B. Its will get Executed when any lifecycle is executed i.e it will provide details about the other component lifecycle

5. ngAfterContentInit()
6. ngAfterContentChecked()
7.ngAfterViewInit()
8.ngAfterViewChecked()



note: We have learned about component lifecycle in ts we have 8 component lifecycle that is used for that use cases 
1. ngOnInit : we used when we want to execute certain set of information after constructor this will execute component scanning 
2. ngOnDestroy : This get Executed when we you  remove component  but in our project we have remove the component using directive i.e *ngIf="show"
3. ngOnChange : This get Executed when we change the @input value here we have SimpleChanges which give the change that is denoted to the input field 

 ngOnChanges(simple: SimpleChanges) {

    console.log(simple)
  }

4. ngDoCheck ; 

Lecture 26 End==>


lecture 27 =>


why we use services ?
=> we use service beacuse we want to seperate the bussiness logic with reuse able content 
=> using the serice we can use our method or some content when ever is required.


There are 3 type to use service 
1. component level ==> in component level we define the service in the component using => provider:[Service_name] , in component level we need to define in every componet when we use the service 
2. Module level ==> in the component level we define the service in the provider above the bootstarp  , in the module level we need to define the service that we have created and can we used in every componet 
3. Global level ==> in the globale level we define the serve when we initiate the service 
     using providerIn:'root' in global level if we initialize the service we can use it with only calling he
      object of the service 

Note : Global level service is preferable 





==> 1. Componet Level 

import { Component, OnInit } from '@angular/core';
import { GreetService } from '../greet.service';

@Component({
  selector: 'app-democomponent',
  templateUrl: './democomponent.component.html',
  styleUrls: ['./democomponent.component.css'],
  providers: [GreetService]
})
export class DemocomponentComponent {

  msg: any;


  constructor(private greet: GreetService) {

  }

  greetmsg() {
    this.msg = this.greet.display();
  }

}



===> 2 . Module level 



import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { DemocomponentComponent } from './democomponent/democomponent.component';
import { GreetService } from './greet.service';

@NgModule({
  declarations: [
    AppComponent,
    DemocomponentComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [GreetService],
  bootstrap: [AppComponent, DemocomponentComponent]
})
export class AppModule { }


=====
import { Component, OnInit } from '@angular/core';
import { GreetService } from '../greet.service';

@Component({
  selector: 'app-democomponent',
  templateUrl: './democomponent.component.html',
  styleUrls: ['./democomponent.component.css'],
  
})
export class DemocomponentComponent {

  msg: any;


  constructor(private greet: GreetService) {

  }

  greetmsg() {
    this.msg = this.greet.display();
  }

}





===> 3. Global level Service

import { Injectable } from '@angular/core';

@Injectable({
  providedIn:'root'
})
export class GreetService {

  display() {
    return "Hello I'm Service";
  }
}



Lecture 27 end ==>


Lecture 28 ==>

Only project over view is dicuss

Lecture 28 end ==>


HttpClient 

Promise : actually perform ascynonus manner i.e 

pause at 36.09

Lecture 29 ==>

promise ==> 1. fullfilled
            2. rejected 

promise first execute if there is no ==> x.then operation this (then ) ensure  that first i will execute then promise will execute 


observable ==> is updated version of the promise where we can stop in the middle in the promise we cannot stop if its started 

observable ==> 1.subscribe
               2. unsubscribe

HttpClient is present in the HttpClientModule 
step 1. Import the httpClientModule in the Import module.ts
 

 step to get the API Call and displaying to the HTML page===>
 1. first called the HttpClientModule in the app.module.ts in the import 
 2. second is to create the service (ng g s serviceName) 
 3. In the service called the HttpClient which is the part of the HttpClientModule in the constructor 

              import { HttpClient } from '@angular/common/http';
               import { Injectable } from '@angular/core';

                   @Injectable({
                 providedIn: 'root'
                    })
                 export class UserServiceService {

                  constructor(private http : HttpClient) { }

                     displayUser(){
                       return this.http.get('https://jsonplaceholder.typicode.com/users');
                         }
                          }

4. and then make the method to called the api in that method using get , put , delete , etc 
5. now in the component called that service method for that you need to called the service class in the constructor
6. now the object that you have created to called the service use that object to called the method / function in the componet method on in the ngOnInit ()
7. use subscribe() because it will return that all the object that are present the api 
8.    this.userService.displayUser().subscribe(data => this.user = data); ==> this part much look wired understand it first we called the function of the service class
  in that we use .subscribe for getting all the data and then we use data => this is arrow function for getting the data and then we assign theall the data to the user:any variable 
  data and data need to be same 




import { Component } from '@angular/core';
import { UserServiceService } from './user-service.service';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'httpclient';

  user: any;

  constructor(private userService: UserServiceService) { }


  ngOnInit(){
    this.userService.displayUser().subscribe(data => this.user = data);

  }
  displayUser() {
    this.userService.displayUser().subscribe(data => this.user = data);
  }
}


9. for displaying the data is big issue  for that you can make the referece of the below html page 

 

<h1>App Component </h1>

<input type="button" (click)="displayUser()" value="GetURLValue">
<!-- {{user}} -->

<ul *ngFor="let user of user">


  <li>{{user.id}} ,{{user.name}},{{user.email}}, {{user.address.city}}</li>
</ul>

<table>

  <tr>
    <th>id</th>
    <th>Name</th>
    <th>Email</th>
    <th>City</th>

  </tr>
  <tr *ngFor="let user of user">

    <td>{{user.id}}</td>
    <td>{{user.name}}</td>
    <td>{{user.email}}</td>
    <td>{{user.address.city}}</td>

  </tr>



</table>

Lecture 29 end ==>

lecture 30 ==>


FormModule ==>

two type of Form in angular 
 1. Template Driven Form ==> NgModule ==> here angular will create the form for getting the value of the form 
 2. Reactive Form - Programaticallty Creating Form ==> here we create the form 


==> import (FormModule) in the app.module.ts in the import ==> 
 [(ngModel)]==> two way data binding 

 ngModel ==> one way data binding 

note : if we use [(ngModule)] it make two way binding  and if you remove that i will become one way binding 


in this lecture we learned about the how to pass the value from form to the ts file using the ngModule and promise 

Lecture 30 end ==>

Lecture 31 ==>

form ==> #myform ngForm


==> 6 classes are present in the form

1.ng-untouched  ==> if your input field is not touched by the form i.e if you click the inpuyt field and not done aur done doesnt matter it change to ng-touch
2. ng-touched
3. ng-pristine  ==> value is not  change 
4. ng-dirty ==> value change happen to form and pristine beecome dirty
5. ng-valid  ==> element is not required / Element is required and holding non null value
6. ng-invalid  ==> Elemenmt is required and holding null value 




==> Notes :

1. import FormModule in the module.ts
2. make form in Html page where form look like this  we have made one id #myForm after that we implement the ngForm for form validation form FormModule 
3. (submit) is the method that we have made for the form note ==> don't called id.value it will make undfined in the console
4. ngModel is used to pass the properties to every input filed all 6 classes that we discuss above will apply in the input filed 
5. it you want input is required make it as required 

<h1>App Component</h1>


<form #myForm="ngForm" (submit)="getDetails(myForm)">

  UserName : <input type="text" name="UserName" ngModel required><br>
  password : <input type="text" name="pwd" ngModel required><br>
  email : <input type="text" name="email" ngModel required><br>
  contact : <input type="text" name="cont" ngModel required><br>
  <input type="submit" value="Submit">


</form>




6. in the componet.ts we made method getDetails()
7. .value ==> hold the value of the form
8. .status ==> hold the status of the form i.e valid or inValid

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'reactiveform';

  getDetails(deatils: any) {
    console.log(deatils); // this will show all the value in console
    console.log(deatils.value);  // this tell that form value 
    console.log(deatils.status); // this will tell that form submited is value or not 

  }

}

9. some style we made using some 6 class

.ng-touched.ng-invalid{
    border-color: red;
}

Lecture 31 End ==>



Lecture 32 ==>


Ractive Form ==>

1. Reactive Form  ==> import in the app.module.ts  ==> (ReactiveFormsModule) import 
2. Create controller in Component ts
3. Create form in template and map those controller to Form 
4. perform Validations at Component Levels



step 1.  Reactive Form  ==> import in the app.module.ts  ==> (ReactiveFormsModule) import 

 imports: [
    BrowserModule,
    AppRoutingModule,ReactiveFormsModule
  ],


  step 2 . Create controller in Component ts


  import { Component } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'reactiveForm2';

  myreactiveform: FormGroup;

  constructor() {

    this.myreactiveform = new FormGroup({});

  }

  ngOnInit() {

    this.myreactiveform = new FormGroup({

      'usr': new FormControl(null, Validators.required),
      'pwd': new FormControl(null),
      'cont': new FormControl(null)
      // 'usr':new FormControl(null, Validators.required)
    });
  }

  submitData() {


    console.log(this.myreactiveform);
  }

 
}


note :in step 2 we need to create the object of the FormGroup
 that formgroup Object we need to bind to the reactive Form 

 and after that we need to create the formCntroller to called the name of the input field and in the FormControl 
 you can validate the form using null , required etc


step 3 :Create form in template and map those controller to Form 
->in this we need to called the FormGroup in that we need to call the object of the formGroup that we have create in the DemoComponentComponent
->we are using submit becaus we want to see that what data we are getting when we sumit the Form
-> in the input field we have declared the (formControlName) that is the property name  and the value that we are passing is
-> is the same value we have created inthe componet using the FormControl.

==================
<h1>App Component</h1>



<form [formGroup]="myreactiveform" (submit)="submitData()">

  UserName : <input type="text" formControlName="usr"><br>
  Password : <input type="text" formControlName="pwd"><br>
  contact : <input type="text" formControlName="cont"><br>
  <!-- Email : <input type="text" > -->
  <input type="submit" value="Submit">

</form>





Template  Driven Form                             Reactive Form

1. Angular interface and form                   Programaticallty creating the Form
object controlledby the angular 

2. Completely relay on Directive                   Exceplicity access in ts Creating formController
ngModel



Lecture 32 End ==>



















































